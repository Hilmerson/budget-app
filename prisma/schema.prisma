// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

enum EmploymentMode {
  FULL_TIME @map("full-time")
  CONTRACT  @map("contract")
  OTHER     @map("other")
}

enum Frequency {
  ONE_TIME   @map("one-time")
  WEEKLY     @map("weekly")
  BI_WEEKLY  @map("bi-weekly")
  MONTHLY    @map("monthly")
  QUARTERLY  @map("quarterly")
  YEARLY     @map("yearly")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?        // Updated to be optional for compatibility
  emailVerified DateTime?
  image         String?
  employmentMode EmploymentMode @default(FULL_TIME)
  income        Float          @default(0)
  incomeFrequency Frequency     @default(MONTHLY)
  level         Int            @default(1)
  experience    Int            @default(0)
  healthScore   Int            @default(50)
  streak        Int            @default(0)
  lastActive    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  budgets       Budget[]
  expenses      Expense[]
  goals         Goal[]
  achievements  Achievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  category    String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String    @id @default(cuid())
  userId      String
  category    String
  amount      Float
  frequency   Frequency @default(MONTHLY)
  description String?
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  icon        String?
  earnedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
