// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// SQL Server doesn't support enums, so we'll use strings instead
// Valid employment modes: "full-time", "contract", "other"
// Valid frequency values: "one-time", "weekly", "bi-weekly", "monthly", "quarterly", "yearly"

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?   // User bio/about me text
  employmentMode String    @default("full-time")
  income        Float     @default(0)
  incomeFrequency String    @default("monthly")
  level         Int       @default(1)
  experience    Int       @default(0)
  healthScore   Int       @default(50)
  streak        Int       @default(0)
  lastActive    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  budgets       Budget[]
  expenses      Expense[]
  incomes       Income[]
  goals         Goal[]
  achievements  Achievement[]
  bills         Bill[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  category    String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String    @id @default(cuid())
  userId      String
  category    String
  amount      Float
  frequency   String    @default("monthly")
  description String?
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id          String    @id @default(cuid())
  userId      String
  source      String
  amount      Float
  frequency   String    @default("monthly")
  description String?
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  icon        String?
  earnedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Bill payment reminders model
model Bill {
  id              String    @id @default(cuid())
  userId          String
  name            String
  amount          Float
  dueDate         DateTime
  category        String
  frequency       String    // "one-time", "weekly", "bi-weekly", "monthly", "quarterly", "yearly"
  description     String?
  reminderDays    Int       @default(3)  // Number of days before due date to send reminder
  autoPay         Boolean   @default(false)
  paymentURL      String?   // Optional URL for online payment
  lastPaid        DateTime?
  isPaid          Boolean   @default(false)
  isRecurring     Boolean   @default(true)
  nextDueDate     DateTime?
  status          String    @default("upcoming") // "paid", "upcoming", "overdue"
  isPinned        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  paymentHistory  BillPayment[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Track payment history for bills
model BillPayment {
  id          String    @id @default(cuid())
  billId      String
  amount      Float
  paymentDate DateTime
  notes       String?
  method      String?   // "card", "bank", "cash", etc.
  createdAt   DateTime  @default(now())
  bill        Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
}
